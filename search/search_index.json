{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"This repository contains all bioinformatics workflows used on the St. Jude Cloud project. Officially, the repository is in beta \u2014 the project is adding workflows as they are developed and put into production. \ud83c\udfe0 Homepage Getting Started At the time of writing, all workflows are written in WDL and are tested using Cromwell . We use Oliver to easily interact with the Cromwell server to perform various tasks. Although we do not test outside of Cromwell, we expect that the workflows will work just as well using other runners. The easiest way to get started is to install bioconda and the run the following commands: conda create -n workflows-dev -c conda-forge cromwell==47 -y conda activate workflows-dev git clone git@github.com:stjudecloud/workflows.git cd workflows Any of the workflows in the workflows folder is a good place to start, e.g. cromwell run workflows/reference/bootstrap-reference.wdl --inputs workflows/reference/inputs.json Repository Structure The repository is laid out as follows: conf - Cromwell configuration files created for various environments that we use across our team. Feel free to use/fork/suggest improvements. docker - Dockerfiles used in our workflows. All docker images are published to Docker Hub . At the time of writing, there is only one Docker image heavily in use, which is our bioinformatics base image . tools - All tools we have wrapped as individual WDL tasks. workflows - Directory containing all end-to-end bioinformatics workflows. Workflows Available The current workflows exist in this repo with the following statuses: Name Version Description Specification Workflow Status Build References v2.0.0 (beta) Build reference files used in harmonization pipelines. None Workflow Standard RNA-Seq v2.0.0 (beta) Standard RNA-Seq harmonization pipeline. Specification Workflow Author \ud83d\udc64 St. Jude Cloud Team Website: https://stjude.cloud Github: @stjudecloud Twitter: @StJudeResearch Tests Given that this repo is still new, there are no tests. When we add tests, we will update the README. \ud83e\udd1d Contributing Contributions, issues and feature requests are welcome! Feel free to check issues page . You can also take a look at the contributing guide . Versioning When versioned, workflows will be versioned according to the SemVer guidelines. For now, we do not guarantee that all workflows will have an associated version. \ud83d\udcdd License Copyright \u00a9 2019 St. Jude Cloud Team . This project is MIT licensed.","title":"Home"},{"location":"#homepage","text":"","title":"\ud83c\udfe0 Homepage"},{"location":"#getting-started","text":"At the time of writing, all workflows are written in WDL and are tested using Cromwell . We use Oliver to easily interact with the Cromwell server to perform various tasks. Although we do not test outside of Cromwell, we expect that the workflows will work just as well using other runners. The easiest way to get started is to install bioconda and the run the following commands: conda create -n workflows-dev -c conda-forge cromwell==47 -y conda activate workflows-dev git clone git@github.com:stjudecloud/workflows.git cd workflows Any of the workflows in the workflows folder is a good place to start, e.g. cromwell run workflows/reference/bootstrap-reference.wdl --inputs workflows/reference/inputs.json","title":"Getting Started"},{"location":"#repository-structure","text":"The repository is laid out as follows: conf - Cromwell configuration files created for various environments that we use across our team. Feel free to use/fork/suggest improvements. docker - Dockerfiles used in our workflows. All docker images are published to Docker Hub . At the time of writing, there is only one Docker image heavily in use, which is our bioinformatics base image . tools - All tools we have wrapped as individual WDL tasks. workflows - Directory containing all end-to-end bioinformatics workflows.","title":"Repository Structure"},{"location":"#workflows-available","text":"The current workflows exist in this repo with the following statuses: Name Version Description Specification Workflow Status Build References v2.0.0 (beta) Build reference files used in harmonization pipelines. None Workflow Standard RNA-Seq v2.0.0 (beta) Standard RNA-Seq harmonization pipeline. Specification Workflow","title":"Workflows Available"},{"location":"#author","text":"\ud83d\udc64 St. Jude Cloud Team Website: https://stjude.cloud Github: @stjudecloud Twitter: @StJudeResearch","title":"Author"},{"location":"#tests","text":"Given that this repo is still new, there are no tests. When we add tests, we will update the README.","title":"Tests"},{"location":"#contributing","text":"Contributions, issues and feature requests are welcome! Feel free to check issues page . You can also take a look at the contributing guide .","title":"\ud83e\udd1d Contributing"},{"location":"#versioning","text":"When versioned, workflows will be versioned according to the SemVer guidelines. For now, we do not guarantee that all workflows will have an associated version.","title":"Versioning"},{"location":"#license","text":"Copyright \u00a9 2019 St. Jude Cloud Team . This project is MIT licensed.","title":"\ud83d\udcdd License"},{"location":"tasks/deeptools/","text":"Deeptools This WDL tool wraps the DeepTools tool. DeepTools is a suite of Python tools for analysis of high throughput sequencing analysis. bamCoverage author Andrew Thrasher email andrew.thrasher@stjude.org description This WDL tool generates a BigWig coverage track using bamCoverage from DeepTools (https://deeptools.readthedocs.io/en/develop/index.html). Inputs Required bai (File, required ): BAM index file corresponding to the input BAM bam (File, required ): Input BAM format file to generate coverage for Defaults memory_gb (Int, default=5) max_retries (Int, default=1) prefix (String, default=basename(bam,\".bam\")) Outputs bigwig (File)","title":"Deeptools"},{"location":"tasks/deeptools/#deeptools","text":"This WDL tool wraps the DeepTools tool. DeepTools is a suite of Python tools for analysis of high throughput sequencing analysis.","title":"Deeptools"},{"location":"tasks/deeptools/#bamcoverage","text":"author Andrew Thrasher email andrew.thrasher@stjude.org description This WDL tool generates a BigWig coverage track using bamCoverage from DeepTools (https://deeptools.readthedocs.io/en/develop/index.html).","title":"bamCoverage"},{"location":"tasks/deeptools/#inputs","text":"","title":"Inputs"},{"location":"tasks/deeptools/#required","text":"bai (File, required ): BAM index file corresponding to the input BAM bam (File, required ): Input BAM format file to generate coverage for","title":"Required"},{"location":"tasks/deeptools/#defaults","text":"memory_gb (Int, default=5) max_retries (Int, default=1) prefix (String, default=basename(bam,\".bam\"))","title":"Defaults"},{"location":"tasks/deeptools/#outputs","text":"bigwig (File)","title":"Outputs"},{"location":"tasks/fastq_screen/","text":"FastQ Screen Methods for bootstrapping and running FastQ Screen build_db author Clay McLeod, Andrew Frantz email clay.mcleod@STJUDE.org, andrew.frantz@stjude.org description This WDL tool downloads the FastQ Screen database and archives it. Inputs Defaults max_retries (Int, default=1) filename (String, default=\"fastq-screen-db\") Outputs db (File) fastq_screen author Andrew Frantz email andrew.frantz@stjude.org description This WDL tool runs FastQ Screen on a pair of fastqs. Inputs Required format (String, required ) db (File, required ) read2 (File, required ) read1 (File, required ) Defaults max_retries (Int, default=1) num_reads (Int, default=100000) Outputs out_files (Array[File])","title":"FastQ Screen"},{"location":"tasks/fastq_screen/#fastq-screen","text":"Methods for bootstrapping and running FastQ Screen","title":"FastQ Screen"},{"location":"tasks/fastq_screen/#build_db","text":"author Clay McLeod, Andrew Frantz email clay.mcleod@STJUDE.org, andrew.frantz@stjude.org description This WDL tool downloads the FastQ Screen database and archives it.","title":"build_db"},{"location":"tasks/fastq_screen/#inputs","text":"","title":"Inputs"},{"location":"tasks/fastq_screen/#defaults","text":"max_retries (Int, default=1) filename (String, default=\"fastq-screen-db\")","title":"Defaults"},{"location":"tasks/fastq_screen/#outputs","text":"db (File)","title":"Outputs"},{"location":"tasks/fastq_screen/#fastq_screen","text":"author Andrew Frantz email andrew.frantz@stjude.org description This WDL tool runs FastQ Screen on a pair of fastqs.","title":"fastq_screen"},{"location":"tasks/fastq_screen/#inputs_1","text":"","title":"Inputs"},{"location":"tasks/fastq_screen/#required","text":"format (String, required ) db (File, required ) read2 (File, required ) read1 (File, required )","title":"Required"},{"location":"tasks/fastq_screen/#defaults_1","text":"max_retries (Int, default=1) num_reads (Int, default=100000)","title":"Defaults"},{"location":"tasks/fastq_screen/#outputs_1","text":"out_files (Array[File])","title":"Outputs"},{"location":"tasks/fastqc/","text":"FastQC This WDL tool wraps the FastQC tool. FastQC generates quality control metrics for sequencing pipelines. fastqc author Andrew Thrasher, Andrew Frantz email andrew.thrasher@stjude.org, andrew.frantz@stjude.org description This WDL tool generates a FastQC quality control metrics report for the input BAM file. Inputs Required bam (File, required ): Input BAM format file to generate coverage for Defaults max_retries (Int, default=1) memory_gb (Int, default=5) prefix (String, default=basename(bam,\".bam\")) ncpu (Int, default=1) Outputs out_files (Array[File])","title":"FastQC"},{"location":"tasks/fastqc/#fastqc","text":"This WDL tool wraps the FastQC tool. FastQC generates quality control metrics for sequencing pipelines.","title":"FastQC"},{"location":"tasks/fastqc/#fastqc_1","text":"author Andrew Thrasher, Andrew Frantz email andrew.thrasher@stjude.org, andrew.frantz@stjude.org description This WDL tool generates a FastQC quality control metrics report for the input BAM file.","title":"fastqc"},{"location":"tasks/fastqc/#inputs","text":"","title":"Inputs"},{"location":"tasks/fastqc/#required","text":"bam (File, required ): Input BAM format file to generate coverage for","title":"Required"},{"location":"tasks/fastqc/#defaults","text":"max_retries (Int, default=1) memory_gb (Int, default=5) prefix (String, default=basename(bam,\".bam\")) ncpu (Int, default=1)","title":"Defaults"},{"location":"tasks/fastqc/#outputs","text":"out_files (Array[File])","title":"Outputs"},{"location":"tasks/fq/","text":"FQ This WDL tool wraps the fq tool . The fq library provides methods for manipulating Illumina generated FastQ files. fq_print_version Inputs None Outputs out (String) fqlint author Andrew Thrasher, Andrew Frantz email andrew.thrasher@stjude.org, andrew.frantz@stjude.org description This WDL tool performs quality control on the input FastQ pairs to ensure proper formatting. Inputs Required read2 (File, required ): Input FastQ with read two read1 (File, required ): Input FastQ with read one Defaults memory_gb (Int, default=8) max_retries (Int, default=1) Outputs validated_read1 (File) validated_read2 (File)","title":"FQ"},{"location":"tasks/fq/#fq","text":"This WDL tool wraps the fq tool . The fq library provides methods for manipulating Illumina generated FastQ files.","title":"FQ"},{"location":"tasks/fq/#fq_print_version","text":"","title":"fq_print_version"},{"location":"tasks/fq/#inputs","text":"None","title":"Inputs"},{"location":"tasks/fq/#outputs","text":"out (String)","title":"Outputs"},{"location":"tasks/fq/#fqlint","text":"author Andrew Thrasher, Andrew Frantz email andrew.thrasher@stjude.org, andrew.frantz@stjude.org description This WDL tool performs quality control on the input FastQ pairs to ensure proper formatting.","title":"fqlint"},{"location":"tasks/fq/#inputs_1","text":"","title":"Inputs"},{"location":"tasks/fq/#required","text":"read2 (File, required ): Input FastQ with read two read1 (File, required ): Input FastQ with read one","title":"Required"},{"location":"tasks/fq/#defaults","text":"memory_gb (Int, default=8) max_retries (Int, default=1)","title":"Defaults"},{"location":"tasks/fq/#outputs_1","text":"validated_read1 (File) validated_read2 (File)","title":"Outputs"},{"location":"tasks/gzip/","text":"gzip This WDL tool wraps any functionality related to gzip. gzip_print_version Inputs None Outputs out (String) unzip author Clay McLeod email clay.mcleod@stjude.org description This WDL tool unzips a gzip archive Inputs Required infile (File, required ): Archive in gzip format to be extracted Defaults max_retries (Int, default=1) outfilename (String, default=basename(infile,\".gz\")) Outputs outfile (File)","title":"gzip"},{"location":"tasks/gzip/#gzip","text":"This WDL tool wraps any functionality related to gzip.","title":"gzip"},{"location":"tasks/gzip/#gzip_print_version","text":"","title":"gzip_print_version"},{"location":"tasks/gzip/#inputs","text":"None","title":"Inputs"},{"location":"tasks/gzip/#outputs","text":"out (String)","title":"Outputs"},{"location":"tasks/gzip/#unzip","text":"author Clay McLeod email clay.mcleod@stjude.org description This WDL tool unzips a gzip archive","title":"unzip"},{"location":"tasks/gzip/#inputs_1","text":"","title":"Inputs"},{"location":"tasks/gzip/#required","text":"infile (File, required ): Archive in gzip format to be extracted","title":"Required"},{"location":"tasks/gzip/#defaults","text":"max_retries (Int, default=1) outfilename (String, default=basename(infile,\".gz\"))","title":"Defaults"},{"location":"tasks/gzip/#outputs_1","text":"outfile (File)","title":"Outputs"},{"location":"tasks/htseq/","text":"HTSeq This WDL tool wraps the htseq tool. HTSeq is a Python library for analyzing sequencing data. count author Andrew Thrasher, Andrew Frantz email andrew.thrasher@stjude.org, andrew.frantz@stjude.org description This WDL tool performs read counting for a set of features in the input BAM file. Inputs Required inferred_strand (String, required ) provided_strand (String, required ) gtf (File, required ): Input genomic features in GTF format to count reads for bam (File, required ): Input BAM format file to generate coverage for Defaults max_retries (Int, default=1) memory_gb (Int, default=20) outfile (String, default=basename(bam,\".bam\") + \".counts.txt\") Outputs out (File)","title":"HTSeq"},{"location":"tasks/htseq/#htseq","text":"This WDL tool wraps the htseq tool. HTSeq is a Python library for analyzing sequencing data.","title":"HTSeq"},{"location":"tasks/htseq/#count","text":"author Andrew Thrasher, Andrew Frantz email andrew.thrasher@stjude.org, andrew.frantz@stjude.org description This WDL tool performs read counting for a set of features in the input BAM file.","title":"count"},{"location":"tasks/htseq/#inputs","text":"","title":"Inputs"},{"location":"tasks/htseq/#required","text":"inferred_strand (String, required ) provided_strand (String, required ) gtf (File, required ): Input genomic features in GTF format to count reads for bam (File, required ): Input BAM format file to generate coverage for","title":"Required"},{"location":"tasks/htseq/#defaults","text":"max_retries (Int, default=1) memory_gb (Int, default=20) outfile (String, default=basename(bam,\".bam\") + \".counts.txt\")","title":"Defaults"},{"location":"tasks/htseq/#outputs","text":"out (File)","title":"Outputs"},{"location":"tasks/md5sum/","text":"This WDL tool wraps the md5sum tool from the GNU core utilities . md5sum is a utility for generating and verifying MD5 hashes. md5sum_print_version Inputs None Outputs out (String) compute_checksum author Andrew Thrasher, Andrew Frantz email andrew.thrasher@stjude.org, andrew.frantz@stjude.org description This WDL tool generates an MD5 checksum for the input file. Inputs Required infile (File, required ): Input file to generate MD5 checksum Defaults memory_gb (Int, default=5) max_retries (Int, default=1) Outputs stdout (String) outfile (File) check_checksum author Andrew Thrasher, Andrew Frantz email andrew.thrasher@stjude.org, andrew.frantz@stjude.org description This WDL tool checks a list of MD5 checksums against the corresponding files to verify integrity Inputs Required infile (File, required ): Input file containing checksums to check Defaults max_retries (Int, default=1) Outputs out (String)","title":"Md5sum"},{"location":"tasks/md5sum/#md5sum_print_version","text":"","title":"md5sum_print_version"},{"location":"tasks/md5sum/#inputs","text":"None","title":"Inputs"},{"location":"tasks/md5sum/#outputs","text":"out (String)","title":"Outputs"},{"location":"tasks/md5sum/#compute_checksum","text":"author Andrew Thrasher, Andrew Frantz email andrew.thrasher@stjude.org, andrew.frantz@stjude.org description This WDL tool generates an MD5 checksum for the input file.","title":"compute_checksum"},{"location":"tasks/md5sum/#inputs_1","text":"","title":"Inputs"},{"location":"tasks/md5sum/#required","text":"infile (File, required ): Input file to generate MD5 checksum","title":"Required"},{"location":"tasks/md5sum/#defaults","text":"memory_gb (Int, default=5) max_retries (Int, default=1)","title":"Defaults"},{"location":"tasks/md5sum/#outputs_1","text":"stdout (String) outfile (File)","title":"Outputs"},{"location":"tasks/md5sum/#check_checksum","text":"author Andrew Thrasher, Andrew Frantz email andrew.thrasher@stjude.org, andrew.frantz@stjude.org description This WDL tool checks a list of MD5 checksums against the corresponding files to verify integrity","title":"check_checksum"},{"location":"tasks/md5sum/#inputs_2","text":"","title":"Inputs"},{"location":"tasks/md5sum/#required_1","text":"infile (File, required ): Input file containing checksums to check","title":"Required"},{"location":"tasks/md5sum/#defaults_1","text":"max_retries (Int, default=1)","title":"Defaults"},{"location":"tasks/md5sum/#outputs_2","text":"out (String)","title":"Outputs"},{"location":"tasks/multiqc/","text":"MultiQC This WDL tool wraps the MultiQC tool. MultiQC aggregates quality control results for bioinformatics. multiqc author Andrew Thrasher, Andrew Frantz email andrew.thrasher@stjude.org, andrew.frantz@stjude.org description This WDL tool generates a MultiQC quality control metrics report summary from input QC result files. Inputs Required flagstat_file (File, required ): A file containing the output of Samtools' flagstat command for the input STAR aligned BAM file fastq_screen (Array[File], required ) fastqc_files (Array[File], required ): An array of files output by FastQC qualimap_bamqc (File, required ): An array of files output by Qualimap's BamQC mode validate_sam_file (File, required ): A file output from Picard's ValidateSam tool sorted_bam (File, required ): A aligned, sorted BAM file Optional star_log (File?) qualimap_rnaseq (File?): An array of files output by Qualimap's RNA-seq mode Defaults memory_gb (Int, default=5) max_retries (Int, default=1) Outputs out (File)","title":"MultiQC"},{"location":"tasks/multiqc/#multiqc","text":"This WDL tool wraps the MultiQC tool. MultiQC aggregates quality control results for bioinformatics.","title":"MultiQC"},{"location":"tasks/multiqc/#multiqc_1","text":"author Andrew Thrasher, Andrew Frantz email andrew.thrasher@stjude.org, andrew.frantz@stjude.org description This WDL tool generates a MultiQC quality control metrics report summary from input QC result files.","title":"multiqc"},{"location":"tasks/multiqc/#inputs","text":"","title":"Inputs"},{"location":"tasks/multiqc/#required","text":"flagstat_file (File, required ): A file containing the output of Samtools' flagstat command for the input STAR aligned BAM file fastq_screen (Array[File], required ) fastqc_files (Array[File], required ): An array of files output by FastQC qualimap_bamqc (File, required ): An array of files output by Qualimap's BamQC mode validate_sam_file (File, required ): A file output from Picard's ValidateSam tool sorted_bam (File, required ): A aligned, sorted BAM file","title":"Required"},{"location":"tasks/multiqc/#optional","text":"star_log (File?) qualimap_rnaseq (File?): An array of files output by Qualimap's RNA-seq mode","title":"Optional"},{"location":"tasks/multiqc/#defaults","text":"memory_gb (Int, default=5) max_retries (Int, default=1)","title":"Defaults"},{"location":"tasks/multiqc/#outputs","text":"out (File)","title":"Outputs"},{"location":"tasks/ngsderive/","text":"ngsderive This WDL tool wraps the ngsderive package . ngsderive is a utility tool to backwards compute strandedness, readlength, instrument for next-generation sequencing data. infer_strand Inputs Required bai (File, required ) bam (File, required ) Optional gtf (File?) Defaults memory_gb (Int, default=5) max_retries (Int, default=1) Outputs strandedness (String) strandedness_file (File) instrument Inputs Required bam (File, required ) Defaults max_retries (Int, default=1) Outputs instrument_file (File) read_length Inputs Required bai (File, required ) bam (File, required ) Defaults memory_gb (Int, default=5) max_retries (Int, default=1) Outputs computed_read_length (String) read_length_file (File)","title":"ngsderive"},{"location":"tasks/ngsderive/#ngsderive","text":"This WDL tool wraps the ngsderive package . ngsderive is a utility tool to backwards compute strandedness, readlength, instrument for next-generation sequencing data.","title":"ngsderive"},{"location":"tasks/ngsderive/#infer_strand","text":"","title":"infer_strand"},{"location":"tasks/ngsderive/#inputs","text":"","title":"Inputs"},{"location":"tasks/ngsderive/#required","text":"bai (File, required ) bam (File, required )","title":"Required"},{"location":"tasks/ngsderive/#optional","text":"gtf (File?)","title":"Optional"},{"location":"tasks/ngsderive/#defaults","text":"memory_gb (Int, default=5) max_retries (Int, default=1)","title":"Defaults"},{"location":"tasks/ngsderive/#outputs","text":"strandedness (String) strandedness_file (File)","title":"Outputs"},{"location":"tasks/ngsderive/#instrument","text":"","title":"instrument"},{"location":"tasks/ngsderive/#inputs_1","text":"","title":"Inputs"},{"location":"tasks/ngsderive/#required_1","text":"bam (File, required )","title":"Required"},{"location":"tasks/ngsderive/#defaults_1","text":"max_retries (Int, default=1)","title":"Defaults"},{"location":"tasks/ngsderive/#outputs_1","text":"instrument_file (File)","title":"Outputs"},{"location":"tasks/ngsderive/#read_length","text":"","title":"read_length"},{"location":"tasks/ngsderive/#inputs_2","text":"","title":"Inputs"},{"location":"tasks/ngsderive/#required_2","text":"bai (File, required ) bam (File, required )","title":"Required"},{"location":"tasks/ngsderive/#defaults_2","text":"memory_gb (Int, default=5) max_retries (Int, default=1)","title":"Defaults"},{"location":"tasks/ngsderive/#outputs_2","text":"computed_read_length (String) read_length_file (File)","title":"Outputs"},{"location":"tasks/picard/","text":"Picard This WDL tool wraps the PicardTools library . PicardTools is a set of Java tools for manipulating sequencing data. mark_duplicates author Andrew Thrasher, Andrew Frantz email andrew.thrasher@stjude.org, andrew.frantz@stjude.org description This WDL tool marks duplicate reads in the input BAM file using Picard. Inputs Required bam (File, required ): Input BAM format file to mark duplicates Defaults max_retries (Int, default=1) memory_gb (Int, default=50) prefix (String, default=basename(bam,\".bam\")) Outputs out (File) validate_bam author Andrew Thrasher, Andrew Frantz email andrew.thrasher@stjude.org, andrew.frantz@stjude.org description This WDL tool validates the input BAM file for correct formatting using Picard. Inputs Required bam (File, required ): Input BAM format file to validate Defaults max_retries (Int, default=1) memory_gb (Int, default=8) output_filename (String, default=basename(bam,\".bam\") + \".ValidateSamFile.txt\") ignore_warnings (Boolean, default=true) index_validation_stringency_less_exhaustive (Boolean, default=false) summary_mode (Boolean, default=false) ignore_missing_platform (Boolean, default=true) Outputs out (File) validated_bam (File) bam_to_fastq author Andrew Thrasher, Andrew Frantz email andrew.thrasher@stjude.org, andrew.frantz@stjude.org description This WDL tool converts the input BAM file into paired FastQ format files. Inputs Required bam (File, required ): Input BAM format file to convert to FastQ Defaults max_retries (Int, default=1) memory_gb (Int, default=40) prefix (String, default=basename(bam,\".bam\")) Outputs read1 (File) read2 (File) sort author Andrew Thrasher email andrew.thrasher@stjude.org description This WDL tool sorts the input BAM file. Inputs Required bam (File, required ): Input BAM format file to sort Optional disk_size_gb (Int?) Defaults max_retries (Int, default=1) memory_gb (Int, default=25) output_filename (String, default=basename(bam,\".bam\") + \".sorted.bam\") sort_order (String, default=\"coordinate\") Outputs sorted_bam (File)","title":"Picard"},{"location":"tasks/picard/#picard","text":"This WDL tool wraps the PicardTools library . PicardTools is a set of Java tools for manipulating sequencing data.","title":"Picard"},{"location":"tasks/picard/#mark_duplicates","text":"author Andrew Thrasher, Andrew Frantz email andrew.thrasher@stjude.org, andrew.frantz@stjude.org description This WDL tool marks duplicate reads in the input BAM file using Picard.","title":"mark_duplicates"},{"location":"tasks/picard/#inputs","text":"","title":"Inputs"},{"location":"tasks/picard/#required","text":"bam (File, required ): Input BAM format file to mark duplicates","title":"Required"},{"location":"tasks/picard/#defaults","text":"max_retries (Int, default=1) memory_gb (Int, default=50) prefix (String, default=basename(bam,\".bam\"))","title":"Defaults"},{"location":"tasks/picard/#outputs","text":"out (File)","title":"Outputs"},{"location":"tasks/picard/#validate_bam","text":"author Andrew Thrasher, Andrew Frantz email andrew.thrasher@stjude.org, andrew.frantz@stjude.org description This WDL tool validates the input BAM file for correct formatting using Picard.","title":"validate_bam"},{"location":"tasks/picard/#inputs_1","text":"","title":"Inputs"},{"location":"tasks/picard/#required_1","text":"bam (File, required ): Input BAM format file to validate","title":"Required"},{"location":"tasks/picard/#defaults_1","text":"max_retries (Int, default=1) memory_gb (Int, default=8) output_filename (String, default=basename(bam,\".bam\") + \".ValidateSamFile.txt\") ignore_warnings (Boolean, default=true) index_validation_stringency_less_exhaustive (Boolean, default=false) summary_mode (Boolean, default=false) ignore_missing_platform (Boolean, default=true)","title":"Defaults"},{"location":"tasks/picard/#outputs_1","text":"out (File) validated_bam (File)","title":"Outputs"},{"location":"tasks/picard/#bam_to_fastq","text":"author Andrew Thrasher, Andrew Frantz email andrew.thrasher@stjude.org, andrew.frantz@stjude.org description This WDL tool converts the input BAM file into paired FastQ format files.","title":"bam_to_fastq"},{"location":"tasks/picard/#inputs_2","text":"","title":"Inputs"},{"location":"tasks/picard/#required_2","text":"bam (File, required ): Input BAM format file to convert to FastQ","title":"Required"},{"location":"tasks/picard/#defaults_2","text":"max_retries (Int, default=1) memory_gb (Int, default=40) prefix (String, default=basename(bam,\".bam\"))","title":"Defaults"},{"location":"tasks/picard/#outputs_2","text":"read1 (File) read2 (File)","title":"Outputs"},{"location":"tasks/picard/#sort","text":"author Andrew Thrasher email andrew.thrasher@stjude.org description This WDL tool sorts the input BAM file.","title":"sort"},{"location":"tasks/picard/#inputs_3","text":"","title":"Inputs"},{"location":"tasks/picard/#required_3","text":"bam (File, required ): Input BAM format file to sort","title":"Required"},{"location":"tasks/picard/#optional","text":"disk_size_gb (Int?)","title":"Optional"},{"location":"tasks/picard/#defaults_3","text":"max_retries (Int, default=1) memory_gb (Int, default=25) output_filename (String, default=basename(bam,\".bam\") + \".sorted.bam\") sort_order (String, default=\"coordinate\")","title":"Defaults"},{"location":"tasks/picard/#outputs_3","text":"sorted_bam (File)","title":"Outputs"},{"location":"tasks/qualimap/","text":"QualiMap This WDL tool wraps the QualiMap tool. QualiMap computes metrics to facilitate evaluation of sequencing data. bamqc author Andrew Thrasher, Andrew Frantz email andrew.thrasher@stjude.org, andrew.frantz@stjude.org description This WDL tool runs QualiMap's bamqc tool on the input BAM file. Inputs Required bam (File, required ): Input BAM format file to generate coverage for Optional disk_size_gb (Int?) Defaults memory_gb (Int, default=8) max_retries (Int, default=1) ncpu (Int, default=1) Outputs results (File) rnaseq author Andrew Thrasher, Andrew Frantz email andrew.thrasher@stjude.org, andrew.frantz@stjude.org description This WDL tool generates runs QualiMap's rnaseq tool on the input BAM file. Inputs Required bam (File, required ): Input BAM format file to generate coverage for Optional disk_size_gb (Int?) gencode_gtf (File?): A GTF format features file containing Gencode features Defaults inferred_strand (String, default=\"\") provided_strand (String, default=\"\"): Strand information for RNA-seq experiments. Options: [Stranded-Reverse, Stranded-Forward, Unstranded] paired_end (Boolean, default=false) max_retries (Int, default=1) memory_gb (Int, default=16) Outputs results (File)","title":"QualiMap"},{"location":"tasks/qualimap/#qualimap","text":"This WDL tool wraps the QualiMap tool. QualiMap computes metrics to facilitate evaluation of sequencing data.","title":"QualiMap"},{"location":"tasks/qualimap/#bamqc","text":"author Andrew Thrasher, Andrew Frantz email andrew.thrasher@stjude.org, andrew.frantz@stjude.org description This WDL tool runs QualiMap's bamqc tool on the input BAM file.","title":"bamqc"},{"location":"tasks/qualimap/#inputs","text":"","title":"Inputs"},{"location":"tasks/qualimap/#required","text":"bam (File, required ): Input BAM format file to generate coverage for","title":"Required"},{"location":"tasks/qualimap/#optional","text":"disk_size_gb (Int?)","title":"Optional"},{"location":"tasks/qualimap/#defaults","text":"memory_gb (Int, default=8) max_retries (Int, default=1) ncpu (Int, default=1)","title":"Defaults"},{"location":"tasks/qualimap/#outputs","text":"results (File)","title":"Outputs"},{"location":"tasks/qualimap/#rnaseq","text":"author Andrew Thrasher, Andrew Frantz email andrew.thrasher@stjude.org, andrew.frantz@stjude.org description This WDL tool generates runs QualiMap's rnaseq tool on the input BAM file.","title":"rnaseq"},{"location":"tasks/qualimap/#inputs_1","text":"","title":"Inputs"},{"location":"tasks/qualimap/#required_1","text":"bam (File, required ): Input BAM format file to generate coverage for","title":"Required"},{"location":"tasks/qualimap/#optional_1","text":"disk_size_gb (Int?) gencode_gtf (File?): A GTF format features file containing Gencode features","title":"Optional"},{"location":"tasks/qualimap/#defaults_1","text":"inferred_strand (String, default=\"\") provided_strand (String, default=\"\"): Strand information for RNA-seq experiments. Options: [Stranded-Reverse, Stranded-Forward, Unstranded] paired_end (Boolean, default=false) max_retries (Int, default=1) memory_gb (Int, default=16)","title":"Defaults"},{"location":"tasks/qualimap/#outputs_1","text":"results (File)","title":"Outputs"},{"location":"tasks/samtools/","text":"SAMtools This WDL tool wraps the SAMtools package . SAMtools provides utlities for manipulating SAM format sequence alignments. samtools_print_version Inputs None Outputs out (String) quickcheck author Andrew Thrasher, Andrew Frantz email andrew.thrasher@stjude.org, andrew.frantz@stjude.org description This WDL tool runs Samtools quickcheck on the input BAM file. This checks that the BAM file appears to be intact, e.g. header exists, at least one sequence is present, and the end-of-file marker exists. Inputs Required bam (File, required ): Input BAM format file to quickcheck Defaults max_retries (Int, default=1) Outputs None split author Andrew Thrasher, Andrew Frantz email andrew.thrasher@stjude.org, andrew.frantz@stjude.org description This WDL tool runs Samtools split on the input BAM file. This splits the BAM by read group into one or more output files. It optionally errors if there are reads present that do not belong to a read group. Inputs Required bam (File, required ): Input BAM format file to split Optional disk_size_gb (Int?) reject_unaccounted (Boolean?): If true, error if there are reads present that do not have read group information. Defaults max_retries (Int, default=1) prefix (String, default=basename(bam,\".bam\")) ncpu (Int, default=1) Outputs split_bams (Array[File]) flagstat author Andrew Thrasher, Andrew Frantz email andrew.thrasher@stjude.org, andrew.frantz@stjude.org description This WDL tool generates a FastQC quality control metrics report for the input BAM file. Inputs Required bam (File, required ): Input BAM format file to generate flagstat for Defaults memory_gb (Int, default=5) max_retries (Int, default=1) outfilename (String, default=basename(bam,\".bam\") + \".flagstat.txt\") Outputs outfile (File) index author Andrew Thrasher, Andrew Frantz email andrew.thrasher@stjude.org, andrew.frantz@stjude.org description This WDL tool runs Samtools flagstat on the input BAM file. Produces statistics about the alignments based on the bit flags set in the BAM. Inputs Required bam (File, required ): Input BAM format file to index Defaults memory_gb (Int, default=15) max_retries (Int, default=1) outfile (String, default=basename(bam) + \".bai\") Outputs bai (File) subsample Inputs Required bam (File, required ) Defaults desired_reads (Int, default=500000) max_retries (Int, default=1) outname (String, default=basename(bam,\".bam\") + \".subsampled.bam\") Outputs sampled_bam (File)","title":"SAMtools"},{"location":"tasks/samtools/#samtools","text":"This WDL tool wraps the SAMtools package . SAMtools provides utlities for manipulating SAM format sequence alignments.","title":"SAMtools"},{"location":"tasks/samtools/#samtools_print_version","text":"","title":"samtools_print_version"},{"location":"tasks/samtools/#inputs","text":"None","title":"Inputs"},{"location":"tasks/samtools/#outputs","text":"out (String)","title":"Outputs"},{"location":"tasks/samtools/#quickcheck","text":"author Andrew Thrasher, Andrew Frantz email andrew.thrasher@stjude.org, andrew.frantz@stjude.org description This WDL tool runs Samtools quickcheck on the input BAM file. This checks that the BAM file appears to be intact, e.g. header exists, at least one sequence is present, and the end-of-file marker exists.","title":"quickcheck"},{"location":"tasks/samtools/#inputs_1","text":"","title":"Inputs"},{"location":"tasks/samtools/#required","text":"bam (File, required ): Input BAM format file to quickcheck","title":"Required"},{"location":"tasks/samtools/#defaults","text":"max_retries (Int, default=1)","title":"Defaults"},{"location":"tasks/samtools/#outputs_1","text":"None","title":"Outputs"},{"location":"tasks/samtools/#split","text":"author Andrew Thrasher, Andrew Frantz email andrew.thrasher@stjude.org, andrew.frantz@stjude.org description This WDL tool runs Samtools split on the input BAM file. This splits the BAM by read group into one or more output files. It optionally errors if there are reads present that do not belong to a read group.","title":"split"},{"location":"tasks/samtools/#inputs_2","text":"","title":"Inputs"},{"location":"tasks/samtools/#required_1","text":"bam (File, required ): Input BAM format file to split","title":"Required"},{"location":"tasks/samtools/#optional","text":"disk_size_gb (Int?) reject_unaccounted (Boolean?): If true, error if there are reads present that do not have read group information.","title":"Optional"},{"location":"tasks/samtools/#defaults_1","text":"max_retries (Int, default=1) prefix (String, default=basename(bam,\".bam\")) ncpu (Int, default=1)","title":"Defaults"},{"location":"tasks/samtools/#outputs_2","text":"split_bams (Array[File])","title":"Outputs"},{"location":"tasks/samtools/#flagstat","text":"author Andrew Thrasher, Andrew Frantz email andrew.thrasher@stjude.org, andrew.frantz@stjude.org description This WDL tool generates a FastQC quality control metrics report for the input BAM file.","title":"flagstat"},{"location":"tasks/samtools/#inputs_3","text":"","title":"Inputs"},{"location":"tasks/samtools/#required_2","text":"bam (File, required ): Input BAM format file to generate flagstat for","title":"Required"},{"location":"tasks/samtools/#defaults_2","text":"memory_gb (Int, default=5) max_retries (Int, default=1) outfilename (String, default=basename(bam,\".bam\") + \".flagstat.txt\")","title":"Defaults"},{"location":"tasks/samtools/#outputs_3","text":"outfile (File)","title":"Outputs"},{"location":"tasks/samtools/#index","text":"author Andrew Thrasher, Andrew Frantz email andrew.thrasher@stjude.org, andrew.frantz@stjude.org description This WDL tool runs Samtools flagstat on the input BAM file. Produces statistics about the alignments based on the bit flags set in the BAM.","title":"index"},{"location":"tasks/samtools/#inputs_4","text":"","title":"Inputs"},{"location":"tasks/samtools/#required_3","text":"bam (File, required ): Input BAM format file to index","title":"Required"},{"location":"tasks/samtools/#defaults_3","text":"memory_gb (Int, default=15) max_retries (Int, default=1) outfile (String, default=basename(bam) + \".bai\")","title":"Defaults"},{"location":"tasks/samtools/#outputs_4","text":"bai (File)","title":"Outputs"},{"location":"tasks/samtools/#subsample","text":"","title":"subsample"},{"location":"tasks/samtools/#inputs_5","text":"","title":"Inputs"},{"location":"tasks/samtools/#required_4","text":"bam (File, required )","title":"Required"},{"location":"tasks/samtools/#defaults_4","text":"desired_reads (Int, default=500000) max_retries (Int, default=1) outname (String, default=basename(bam,\".bam\") + \".subsampled.bam\")","title":"Defaults"},{"location":"tasks/samtools/#outputs_5","text":"sampled_bam (File)","title":"Outputs"},{"location":"tasks/star/","text":"STAR This WDL tool wraps the STAR aligner . STAR is an RNA-seq aligner. star_print_version Inputs None Outputs out (String) build_db author Andrew Thrasher, Andrew Frantz email andrew.thrasher@stjude.org, andrew.frantz@stjude.org description This WDL tool runs STAR's build command to generate a STAR format reference for alignment. Inputs Required stardb_dir_name (String, required ) gencode_gtf (File, required ): GTF format feature file with Gencode features reference_fasta (File, required ): The FASTA format reference file for the genome Optional disk_size_gb (Int?) Defaults max_retries (Int, default=1) memory_gb (Int, default=50) ram_limit (String, default=\"45000000000\") ncpu (Int, default=1) Outputs stardb_out (File) alignment author Andrew Thrasher, Andrew Frantz email andrew.thrasher@stjude.org, andrew.frantz@stjude.org description This WDL tool generates a FastQC quality control metrics report for the input BAM file. Inputs Required output_prefix (String, required ) stardb_tar_gz (File, required ): A gzipped TAR file containing the STAR reference files read_two_fastqs (Array[File], required ): An array of FastQ files containing read two information in the same order as the read one FastQ read_one_fastqs (Array[File], required ): An array of FastQ files containing read one information Optional disk_size_gb (Int?) read_groups (String?): A string containing the read group information to output in the BAM file Defaults max_retries (Int, default=1) memory_gb (Int, default=50) ncpu (Int, default=1) Outputs star_log (File) star_bam (File)","title":"STAR"},{"location":"tasks/star/#star","text":"This WDL tool wraps the STAR aligner . STAR is an RNA-seq aligner.","title":"STAR"},{"location":"tasks/star/#star_print_version","text":"","title":"star_print_version"},{"location":"tasks/star/#inputs","text":"None","title":"Inputs"},{"location":"tasks/star/#outputs","text":"out (String)","title":"Outputs"},{"location":"tasks/star/#build_db","text":"author Andrew Thrasher, Andrew Frantz email andrew.thrasher@stjude.org, andrew.frantz@stjude.org description This WDL tool runs STAR's build command to generate a STAR format reference for alignment.","title":"build_db"},{"location":"tasks/star/#inputs_1","text":"","title":"Inputs"},{"location":"tasks/star/#required","text":"stardb_dir_name (String, required ) gencode_gtf (File, required ): GTF format feature file with Gencode features reference_fasta (File, required ): The FASTA format reference file for the genome","title":"Required"},{"location":"tasks/star/#optional","text":"disk_size_gb (Int?)","title":"Optional"},{"location":"tasks/star/#defaults","text":"max_retries (Int, default=1) memory_gb (Int, default=50) ram_limit (String, default=\"45000000000\") ncpu (Int, default=1)","title":"Defaults"},{"location":"tasks/star/#outputs_1","text":"stardb_out (File)","title":"Outputs"},{"location":"tasks/star/#alignment","text":"author Andrew Thrasher, Andrew Frantz email andrew.thrasher@stjude.org, andrew.frantz@stjude.org description This WDL tool generates a FastQC quality control metrics report for the input BAM file.","title":"alignment"},{"location":"tasks/star/#inputs_2","text":"","title":"Inputs"},{"location":"tasks/star/#required_1","text":"output_prefix (String, required ) stardb_tar_gz (File, required ): A gzipped TAR file containing the STAR reference files read_two_fastqs (Array[File], required ): An array of FastQ files containing read two information in the same order as the read one FastQ read_one_fastqs (Array[File], required ): An array of FastQ files containing read one information","title":"Required"},{"location":"tasks/star/#optional_1","text":"disk_size_gb (Int?) read_groups (String?): A string containing the read group information to output in the BAM file","title":"Optional"},{"location":"tasks/star/#defaults_1","text":"max_retries (Int, default=1) memory_gb (Int, default=50) ncpu (Int, default=1)","title":"Defaults"},{"location":"tasks/star/#outputs_2","text":"star_log (File) star_bam (File)","title":"Outputs"},{"location":"tasks/tar/","text":"tar This WDL tool wraps any functionality related to tar. tar_print_version Inputs None Outputs out (String) untar author Andrew Thrasher email andrew.thrasher@stjude.org description This WDL tool unzips a tar archive Inputs Required infile (File, required ): Archive in tar format to be extracted Defaults max_retries (Int, default=1) Outputs outfiles (Array[File])","title":"tar"},{"location":"tasks/tar/#tar","text":"This WDL tool wraps any functionality related to tar.","title":"tar"},{"location":"tasks/tar/#tar_print_version","text":"","title":"tar_print_version"},{"location":"tasks/tar/#inputs","text":"None","title":"Inputs"},{"location":"tasks/tar/#outputs","text":"out (String)","title":"Outputs"},{"location":"tasks/tar/#untar","text":"author Andrew Thrasher email andrew.thrasher@stjude.org description This WDL tool unzips a tar archive","title":"untar"},{"location":"tasks/tar/#inputs_1","text":"","title":"Inputs"},{"location":"tasks/tar/#required","text":"infile (File, required ): Archive in tar format to be extracted","title":"Required"},{"location":"tasks/tar/#defaults","text":"max_retries (Int, default=1)","title":"Defaults"},{"location":"tasks/tar/#outputs_1","text":"outfiles (Array[File])","title":"Outputs"},{"location":"tasks/tsne/","text":"t-SNE This WDL tool implements a t-SNE (t-Distribute Stochastic Neighbor Embedding) plot to visualize the relationship between input samples and a reference data set. (https://lvdmaaten.github.io/tsne/) plot author Andrew Thrasher email andrew.thrasher@stjude.org Inputs Required gencode_gtf (File, required ) covariates (File, required ): A tab delimited file with Sample, Diagnosis, Strandedness, LibraryType, ReadLength. Valid values for strandedness: [Stranded, Unstranded]. Valid values for LibraryType: [mRNA, totalRNA]. ReadLength should be specified similar to the form PE100bp. blacklist (File, required ) counts (Array[File], required ) Optional tissue_type (String?) input_counts (Array[File]?) inputs (Array[String]?) Defaults disk_size (Int, default=15) memory_gb (Int, default=15) max_retries (Int, default=1) outfile (String, default=\"tsne.html\") Outputs html (File) validate_tissue_type author Andrew Thrasher email andrew.thrasher@stjude.org Inputs Required tissue_type (String, required ): Provide the tissue type to compare against: [blood, brain, solid]; Choices : ['blood', 'brain', 'solid'] Defaults memory_gb (Int, default=5) Outputs None append_input author Andrew Thrasher email andrew.thrasher@stjude.org Inputs Required covariates_infile (File, required ): A file of covariate data with the format 'sample diagnosis strandedness library_type read_length' inputs (Array[String], required ): An array of input samples to append to the covariates file Defaults memory_gb (Int, default=5) Outputs covariates_outfile (File)","title":"t-SNE"},{"location":"tasks/tsne/#t-sne","text":"This WDL tool implements a t-SNE (t-Distribute Stochastic Neighbor Embedding) plot to visualize the relationship between input samples and a reference data set. (https://lvdmaaten.github.io/tsne/)","title":"t-SNE"},{"location":"tasks/tsne/#plot","text":"author Andrew Thrasher email andrew.thrasher@stjude.org","title":"plot"},{"location":"tasks/tsne/#inputs","text":"","title":"Inputs"},{"location":"tasks/tsne/#required","text":"gencode_gtf (File, required ) covariates (File, required ): A tab delimited file with Sample, Diagnosis, Strandedness, LibraryType, ReadLength. Valid values for strandedness: [Stranded, Unstranded]. Valid values for LibraryType: [mRNA, totalRNA]. ReadLength should be specified similar to the form PE100bp. blacklist (File, required ) counts (Array[File], required )","title":"Required"},{"location":"tasks/tsne/#optional","text":"tissue_type (String?) input_counts (Array[File]?) inputs (Array[String]?)","title":"Optional"},{"location":"tasks/tsne/#defaults","text":"disk_size (Int, default=15) memory_gb (Int, default=15) max_retries (Int, default=1) outfile (String, default=\"tsne.html\")","title":"Defaults"},{"location":"tasks/tsne/#outputs","text":"html (File)","title":"Outputs"},{"location":"tasks/tsne/#validate_tissue_type","text":"author Andrew Thrasher email andrew.thrasher@stjude.org","title":"validate_tissue_type"},{"location":"tasks/tsne/#inputs_1","text":"","title":"Inputs"},{"location":"tasks/tsne/#required_1","text":"tissue_type (String, required ): Provide the tissue type to compare against: [blood, brain, solid]; Choices : ['blood', 'brain', 'solid']","title":"Required"},{"location":"tasks/tsne/#defaults_1","text":"memory_gb (Int, default=5)","title":"Defaults"},{"location":"tasks/tsne/#outputs_1","text":"None","title":"Outputs"},{"location":"tasks/tsne/#append_input","text":"author Andrew Thrasher email andrew.thrasher@stjude.org","title":"append_input"},{"location":"tasks/tsne/#inputs_2","text":"","title":"Inputs"},{"location":"tasks/tsne/#required_2","text":"covariates_infile (File, required ): A file of covariate data with the format 'sample diagnosis strandedness library_type read_length' inputs (Array[String], required ): An array of input samples to append to the covariates file","title":"Required"},{"location":"tasks/tsne/#defaults_2","text":"memory_gb (Int, default=5)","title":"Defaults"},{"location":"tasks/tsne/#outputs_2","text":"covariates_outfile (File)","title":"Outputs"},{"location":"tasks/util/","text":"Utilities This WDL tool includes custom scripts to parse and reformat task output as part of a workflow. get_read_groups author Andrew Thrasher, Andrew Frantz email andrew.thrasher@stjude.org, andrew.frantz@stjude.org description This WDL tool is a utility to get read group information from a BAM file and write it out to as a string Inputs Required bam (File, required ): Input BAM format file to get read groups from Defaults max_retries (Int, default=1) Outputs out (String) file_prefix Inputs Required in_file (File, required ) Defaults max_retries (Int, default=1) Outputs out (String)","title":"Utilities"},{"location":"tasks/util/#utilities","text":"This WDL tool includes custom scripts to parse and reformat task output as part of a workflow.","title":"Utilities"},{"location":"tasks/util/#get_read_groups","text":"author Andrew Thrasher, Andrew Frantz email andrew.thrasher@stjude.org, andrew.frantz@stjude.org description This WDL tool is a utility to get read group information from a BAM file and write it out to as a string","title":"get_read_groups"},{"location":"tasks/util/#inputs","text":"","title":"Inputs"},{"location":"tasks/util/#required","text":"bam (File, required ): Input BAM format file to get read groups from","title":"Required"},{"location":"tasks/util/#defaults","text":"max_retries (Int, default=1)","title":"Defaults"},{"location":"tasks/util/#outputs","text":"out (String)","title":"Outputs"},{"location":"tasks/util/#file_prefix","text":"","title":"file_prefix"},{"location":"tasks/util/#inputs_1","text":"","title":"Inputs"},{"location":"tasks/util/#required_1","text":"in_file (File, required )","title":"Required"},{"location":"tasks/util/#defaults_1","text":"max_retries (Int, default=1)","title":"Defaults"},{"location":"tasks/util/#outputs_1","text":"out (String)","title":"Outputs"},{"location":"tasks/wget/","text":"wget This WDL tool wraps the wget tool. wget_print_version Inputs None Outputs out (String) download author Clay McLeod email clay.mcleod@stjude.org description This WDL tool uses wget to download a file from a remote URL to the local filesystem Inputs Required outfilename (String, required ): Name to use for the output file url (String, required ): URL of the file to download Defaults max_retries (Int, default=1) Outputs outfile (File)","title":"wget"},{"location":"tasks/wget/#wget","text":"This WDL tool wraps the wget tool.","title":"wget"},{"location":"tasks/wget/#wget_print_version","text":"","title":"wget_print_version"},{"location":"tasks/wget/#inputs","text":"None","title":"Inputs"},{"location":"tasks/wget/#outputs","text":"out (String)","title":"Outputs"},{"location":"tasks/wget/#download","text":"author Clay McLeod email clay.mcleod@stjude.org description This WDL tool uses wget to download a file from a remote URL to the local filesystem","title":"download"},{"location":"tasks/wget/#inputs_1","text":"","title":"Inputs"},{"location":"tasks/wget/#required","text":"outfilename (String, required ): Name to use for the output file url (String, required ): URL of the file to download","title":"Required"},{"location":"tasks/wget/#defaults","text":"max_retries (Int, default=1)","title":"Defaults"},{"location":"tasks/wget/#outputs_1","text":"outfile (File)","title":"Outputs"},{"location":"workflows/bam-to-fastqs/","text":"Bam to FastQs This WDL workflow converts an input BAM file to a set of fastq files for read 1 and read 2. It performs QC checks along the way to validate the input and output. Output: read1s an array of files with the first read in the pair read2s an array of files with the second read in the pair LICENSING: MIT License Copyright 2019 St. Jude Children's Research Hospital Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. bam_to_fastqs Inputs Required bam (File, required ): BAM file to split into fastqs. Optional split.disk_size_gb (Int?) split.reject_unaccounted (Boolean?) Defaults fqlint.memory_gb (Int, default=8) bam_to_fastq.prefix (String, default=basename(bam,\".bam\")) split.prefix (String, default=basename(bam,\".bam\")) max_retries (Int, default=1): Maximum number of times to retry on a failure. bam_to_fastq_memory_gb (Int, default=40): How much memory to provide while converting to fastqs. samtools_sort_ncpu (Int, default=1): Number of CPUs to use while sorting the BAM. Outputs read1s (Array[File]) read2s (Array[File])","title":"Bam to FastQs"},{"location":"workflows/bam-to-fastqs/#bam-to-fastqs","text":"This WDL workflow converts an input BAM file to a set of fastq files for read 1 and read 2. It performs QC checks along the way to validate the input and output.","title":"Bam to FastQs"},{"location":"workflows/bam-to-fastqs/#output","text":"read1s an array of files with the first read in the pair read2s an array of files with the second read in the pair","title":"Output:"},{"location":"workflows/bam-to-fastqs/#licensing","text":"","title":"LICENSING:"},{"location":"workflows/bam-to-fastqs/#mit-license","text":"Copyright 2019 St. Jude Children's Research Hospital Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"MIT License"},{"location":"workflows/bam-to-fastqs/#bam_to_fastqs","text":"","title":"bam_to_fastqs"},{"location":"workflows/bam-to-fastqs/#inputs","text":"","title":"Inputs"},{"location":"workflows/bam-to-fastqs/#required","text":"bam (File, required ): BAM file to split into fastqs.","title":"Required"},{"location":"workflows/bam-to-fastqs/#optional","text":"split.disk_size_gb (Int?) split.reject_unaccounted (Boolean?)","title":"Optional"},{"location":"workflows/bam-to-fastqs/#defaults","text":"fqlint.memory_gb (Int, default=8) bam_to_fastq.prefix (String, default=basename(bam,\".bam\")) split.prefix (String, default=basename(bam,\".bam\")) max_retries (Int, default=1): Maximum number of times to retry on a failure. bam_to_fastq_memory_gb (Int, default=40): How much memory to provide while converting to fastqs. samtools_sort_ncpu (Int, default=1): Number of CPUs to use while sorting the BAM.","title":"Defaults"},{"location":"workflows/bam-to-fastqs/#outputs","text":"read1s (Array[File]) read2s (Array[File])","title":"Outputs"},{"location":"workflows/interactive-tsne/","text":"Interactive t-SNE This WDL workflow remaps input bams and compares them to St. Jude RNA-seq samples using a t-SNE plot. Output tsne_plot t-SNE plot including the input samples compared to reference data generated_counts RNAseq count data for the input bams generated_mappings Bam output from the St. Jude Cloud RNA-seq workflow for each input bam LICENSING MIT License Copyright 2020 St. Jude Children's Research Hospital Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. interactive_tsne Inputs Required tissue_type (String, required ): Provide the tissue type to compare against: [blood, brain, solid]; Choices : ['blood', 'brain', 'solid'] gene_blacklist (File, required ) stardb_tar_gz (File, required ) gencode_gtf (File, required ) in_bams (Array[File], required ): Provide bams to run for comparison Optional rnaseq_standard.picard_sort.disk_size_gb (Int?) rnaseq_standard.alignment.disk_size_gb (Int?) rnaseq_standard.bam_to_fastqs.split.disk_size_gb (Int?) rnaseq_standard.bam_to_fastqs.split.reject_unaccounted (Boolean?) solid_covariates (File?) brain_covariates (File?) blood_covariates (File?) solid_counts (File?) brain_counts (File?) blood_counts (File?) covariates_file (File?) reference_counts (File?) Defaults generate_plot.disk_size (Int, default=15) generate_plot.memory_gb (Int, default=15) generate_plot.max_retries (Int, default=1) append_input.memory_gb (Int, default=5) file_prefix.max_retries (Int, default=1) untar.max_retries (Int, default=1) unzip.max_retries (Int, default=1) unzip.outfilename (String, default=basename(infile,\".gz\")) rnaseq_standard.deeptools_bamCoverage.memory_gb (Int, default=5) rnaseq_standard.deeptools_bamCoverage.prefix (String, default=basename(bam,\".bam\")) rnaseq_standard.htseq_count.memory_gb (Int, default=20) rnaseq_standard.htseq_count.outfile (String, default=basename(bam,\".bam\") + \".counts.txt\") rnaseq_standard.ngsderive_strandedness.memory_gb (Int, default=5) rnaseq_standard.validate_bam.memory_gb (Int, default=8) rnaseq_standard.validate_bam.output_filename (String, default=basename(bam,\".bam\") + \".ValidateSamFile.txt\"): Name for the output HTML t-SNE plot rnaseq_standard.validate_bam.ignore_warnings (Boolean, default=true) rnaseq_standard.validate_bam.index_validation_stringency_less_exhaustive (Boolean, default=false) rnaseq_standard.validate_bam.summary_mode (Boolean, default=false) rnaseq_standard.validate_bam.ignore_missing_platform (Boolean, default=true) rnaseq_standard.samtools_index.memory_gb (Int, default=15) rnaseq_standard.samtools_index.outfile (String, default=basename(bam) + \".bai\") rnaseq_standard.picard_sort.memory_gb (Int, default=25) rnaseq_standard.picard_sort.output_filename (String, default=basename(bam,\".bam\") + \".sorted.bam\"): Name for the output HTML t-SNE plot rnaseq_standard.picard_sort.sort_order (String, default=\"coordinate\") rnaseq_standard.alignment.memory_gb (Int, default=50) rnaseq_standard.alignment.ncpu (Int, default=1) rnaseq_standard.bam_to_fastqs.fqlint.memory_gb (Int, default=8) rnaseq_standard.bam_to_fastqs.bam_to_fastq.prefix (String, default=basename(bam,\".bam\")) rnaseq_standard.bam_to_fastqs.split.prefix (String, default=basename(bam,\".bam\")) rnaseq_standard.bam_to_fastqs.bam_to_fastq_memory_gb (Int, default=40) rnaseq_standard.bam_to_fastqs.samtools_sort_ncpu (Int, default=1) rnaseq_standard.validate_input_bam.memory_gb (Int, default=8) rnaseq_standard.validate_input_bam.output_filename (String, default=basename(bam,\".bam\") + \".ValidateSamFile.txt\"): Name for the output HTML t-SNE plot rnaseq_standard.validate_input_bam.ignore_warnings (Boolean, default=true) rnaseq_standard.validate_input_bam.index_validation_stringency_less_exhaustive (Boolean, default=false) rnaseq_standard.validate_input_bam.summary_mode (Boolean, default=false) rnaseq_standard.validate_input_bam.ignore_missing_platform (Boolean, default=true) rnaseq_standard.max_retries (Int, default=1) uncompress_gencode.max_retries (Int, default=1) uncompress_gencode.outfilename (String, default=basename(infile,\".gz\")) validate_tissue_type.memory_gb (Int, default=5) output_filename (String, default=\"output.html\"): Name for the output HTML t-SNE plot Outputs tsne_plot (File) generated_counts (Array[File]) generated_mappings (Array[File])","title":"Interactive t-SNE"},{"location":"workflows/interactive-tsne/#interactive-t-sne","text":"This WDL workflow remaps input bams and compares them to St. Jude RNA-seq samples using a t-SNE plot.","title":"Interactive t-SNE"},{"location":"workflows/interactive-tsne/#output","text":"tsne_plot t-SNE plot including the input samples compared to reference data generated_counts RNAseq count data for the input bams generated_mappings Bam output from the St. Jude Cloud RNA-seq workflow for each input bam","title":"Output"},{"location":"workflows/interactive-tsne/#licensing","text":"","title":"LICENSING"},{"location":"workflows/interactive-tsne/#mit-license","text":"Copyright 2020 St. Jude Children's Research Hospital Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"MIT License"},{"location":"workflows/interactive-tsne/#interactive_tsne","text":"","title":"interactive_tsne"},{"location":"workflows/interactive-tsne/#inputs","text":"","title":"Inputs"},{"location":"workflows/interactive-tsne/#required","text":"tissue_type (String, required ): Provide the tissue type to compare against: [blood, brain, solid]; Choices : ['blood', 'brain', 'solid'] gene_blacklist (File, required ) stardb_tar_gz (File, required ) gencode_gtf (File, required ) in_bams (Array[File], required ): Provide bams to run for comparison","title":"Required"},{"location":"workflows/interactive-tsne/#optional","text":"rnaseq_standard.picard_sort.disk_size_gb (Int?) rnaseq_standard.alignment.disk_size_gb (Int?) rnaseq_standard.bam_to_fastqs.split.disk_size_gb (Int?) rnaseq_standard.bam_to_fastqs.split.reject_unaccounted (Boolean?) solid_covariates (File?) brain_covariates (File?) blood_covariates (File?) solid_counts (File?) brain_counts (File?) blood_counts (File?) covariates_file (File?) reference_counts (File?)","title":"Optional"},{"location":"workflows/interactive-tsne/#defaults","text":"generate_plot.disk_size (Int, default=15) generate_plot.memory_gb (Int, default=15) generate_plot.max_retries (Int, default=1) append_input.memory_gb (Int, default=5) file_prefix.max_retries (Int, default=1) untar.max_retries (Int, default=1) unzip.max_retries (Int, default=1) unzip.outfilename (String, default=basename(infile,\".gz\")) rnaseq_standard.deeptools_bamCoverage.memory_gb (Int, default=5) rnaseq_standard.deeptools_bamCoverage.prefix (String, default=basename(bam,\".bam\")) rnaseq_standard.htseq_count.memory_gb (Int, default=20) rnaseq_standard.htseq_count.outfile (String, default=basename(bam,\".bam\") + \".counts.txt\") rnaseq_standard.ngsderive_strandedness.memory_gb (Int, default=5) rnaseq_standard.validate_bam.memory_gb (Int, default=8) rnaseq_standard.validate_bam.output_filename (String, default=basename(bam,\".bam\") + \".ValidateSamFile.txt\"): Name for the output HTML t-SNE plot rnaseq_standard.validate_bam.ignore_warnings (Boolean, default=true) rnaseq_standard.validate_bam.index_validation_stringency_less_exhaustive (Boolean, default=false) rnaseq_standard.validate_bam.summary_mode (Boolean, default=false) rnaseq_standard.validate_bam.ignore_missing_platform (Boolean, default=true) rnaseq_standard.samtools_index.memory_gb (Int, default=15) rnaseq_standard.samtools_index.outfile (String, default=basename(bam) + \".bai\") rnaseq_standard.picard_sort.memory_gb (Int, default=25) rnaseq_standard.picard_sort.output_filename (String, default=basename(bam,\".bam\") + \".sorted.bam\"): Name for the output HTML t-SNE plot rnaseq_standard.picard_sort.sort_order (String, default=\"coordinate\") rnaseq_standard.alignment.memory_gb (Int, default=50) rnaseq_standard.alignment.ncpu (Int, default=1) rnaseq_standard.bam_to_fastqs.fqlint.memory_gb (Int, default=8) rnaseq_standard.bam_to_fastqs.bam_to_fastq.prefix (String, default=basename(bam,\".bam\")) rnaseq_standard.bam_to_fastqs.split.prefix (String, default=basename(bam,\".bam\")) rnaseq_standard.bam_to_fastqs.bam_to_fastq_memory_gb (Int, default=40) rnaseq_standard.bam_to_fastqs.samtools_sort_ncpu (Int, default=1) rnaseq_standard.validate_input_bam.memory_gb (Int, default=8) rnaseq_standard.validate_input_bam.output_filename (String, default=basename(bam,\".bam\") + \".ValidateSamFile.txt\"): Name for the output HTML t-SNE plot rnaseq_standard.validate_input_bam.ignore_warnings (Boolean, default=true) rnaseq_standard.validate_input_bam.index_validation_stringency_less_exhaustive (Boolean, default=false) rnaseq_standard.validate_input_bam.summary_mode (Boolean, default=false) rnaseq_standard.validate_input_bam.ignore_missing_platform (Boolean, default=true) rnaseq_standard.max_retries (Int, default=1) uncompress_gencode.max_retries (Int, default=1) uncompress_gencode.outfilename (String, default=basename(infile,\".gz\")) validate_tissue_type.memory_gb (Int, default=5) output_filename (String, default=\"output.html\"): Name for the output HTML t-SNE plot","title":"Defaults"},{"location":"workflows/interactive-tsne/#outputs","text":"tsne_plot (File) generated_counts (Array[File]) generated_mappings (Array[File])","title":"Outputs"},{"location":"workflows/interactive_tsne_from_bams/","text":"Interactive t-SNE from BAMs This WDL workflow compares gene counts from BAM files to St. Jude RNA-seq samples using a t-SNE plot. The BAM-based t-SNE pipeline requires that alignment must be against the GRCh38_no_alt reference . It should use parameters as specifed in our RNA-seq workflow to minimize any discrepancies caused by differing alignment specification. Output tsne_plot t-SNE plot including the input samples compared to reference data generated_counts RNAseq count data for the input bams LICENSING MIT License Copyright 2020 St. Jude Children's Research Hospital Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. interactive_tsne_from_bams Inputs Required tissue_type (String, required ): Provide the tissue type to compare against: [blood, brain, solid]; Choices : ['blood', 'brain', 'solid'] gene_blacklist (File, required ) gencode_gtf (File, required ) in_bams (Array[File], required ): Provide bams to run for comparison Optional solid_covariates (File?) brain_covariates (File?) blood_covariates (File?) solid_counts (File?) brain_counts (File?) blood_counts (File?) covariates_file (File?) reference_counts (File?) Defaults generate_plot.disk_size (Int, default=15) generate_plot.memory_gb (Int, default=15) generate_plot.max_retries (Int, default=1) append_input.memory_gb (Int, default=5) file_prefix.max_retries (Int, default=1) untar.max_retries (Int, default=1) unzip.max_retries (Int, default=1) unzip.outfilename (String, default=basename(infile,\".gz\")) count.max_retries (Int, default=1) count.memory_gb (Int, default=20) count.outfile (String, default=basename(bam,\".bam\") + \".counts.txt\") infer.memory_gb (Int, default=5) infer.max_retries (Int, default=1) index.memory_gb (Int, default=15) index.max_retries (Int, default=1) index.outfile (String, default=basename(bam) + \".bai\") uncompress_gencode.max_retries (Int, default=1) uncompress_gencode.outfilename (String, default=basename(infile,\".gz\")) validate_tissue_type.memory_gb (Int, default=5) output_filename (String, default=\"output.html\"): Name for the output HTML t-SNE plot Outputs tsne_plot (File) generated_counts (Array[File])","title":"Interactive t-SNE from BAMs"},{"location":"workflows/interactive_tsne_from_bams/#interactive-t-sne-from-bams","text":"This WDL workflow compares gene counts from BAM files to St. Jude RNA-seq samples using a t-SNE plot. The BAM-based t-SNE pipeline requires that alignment must be against the GRCh38_no_alt reference . It should use parameters as specifed in our RNA-seq workflow to minimize any discrepancies caused by differing alignment specification.","title":"Interactive t-SNE from BAMs"},{"location":"workflows/interactive_tsne_from_bams/#output","text":"tsne_plot t-SNE plot including the input samples compared to reference data generated_counts RNAseq count data for the input bams","title":"Output"},{"location":"workflows/interactive_tsne_from_bams/#licensing","text":"","title":"LICENSING"},{"location":"workflows/interactive_tsne_from_bams/#mit-license","text":"Copyright 2020 St. Jude Children's Research Hospital Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"MIT License"},{"location":"workflows/interactive_tsne_from_bams/#interactive_tsne_from_bams","text":"","title":"interactive_tsne_from_bams"},{"location":"workflows/interactive_tsne_from_bams/#inputs","text":"","title":"Inputs"},{"location":"workflows/interactive_tsne_from_bams/#required","text":"tissue_type (String, required ): Provide the tissue type to compare against: [blood, brain, solid]; Choices : ['blood', 'brain', 'solid'] gene_blacklist (File, required ) gencode_gtf (File, required ) in_bams (Array[File], required ): Provide bams to run for comparison","title":"Required"},{"location":"workflows/interactive_tsne_from_bams/#optional","text":"solid_covariates (File?) brain_covariates (File?) blood_covariates (File?) solid_counts (File?) brain_counts (File?) blood_counts (File?) covariates_file (File?) reference_counts (File?)","title":"Optional"},{"location":"workflows/interactive_tsne_from_bams/#defaults","text":"generate_plot.disk_size (Int, default=15) generate_plot.memory_gb (Int, default=15) generate_plot.max_retries (Int, default=1) append_input.memory_gb (Int, default=5) file_prefix.max_retries (Int, default=1) untar.max_retries (Int, default=1) unzip.max_retries (Int, default=1) unzip.outfilename (String, default=basename(infile,\".gz\")) count.max_retries (Int, default=1) count.memory_gb (Int, default=20) count.outfile (String, default=basename(bam,\".bam\") + \".counts.txt\") infer.memory_gb (Int, default=5) infer.max_retries (Int, default=1) index.memory_gb (Int, default=15) index.max_retries (Int, default=1) index.outfile (String, default=basename(bam) + \".bai\") uncompress_gencode.max_retries (Int, default=1) uncompress_gencode.outfilename (String, default=basename(infile,\".gz\")) validate_tissue_type.memory_gb (Int, default=5) output_filename (String, default=\"output.html\"): Name for the output HTML t-SNE plot","title":"Defaults"},{"location":"workflows/interactive_tsne_from_bams/#outputs","text":"tsne_plot (File) generated_counts (Array[File])","title":"Outputs"},{"location":"workflows/interactive_tsne_from_counts/","text":"Interactive t-SNE from Counts This WDL workflow compares counts files to St. Jude RNA-seq samples using a t-SNE plot. The count-based t-SNE pipeline requires that alignment must be against the GRCh38_no_alt reference . It should use parameters as specifed in our RNA-seq workflow to minimize any discrepancies caused by differing alignment specification. The count-based t-SNE pipeline requires that feature counts be generated with htseq-count as described in our RNA-seq workflow . This pipeline uses Gencode v31 annotations. Output tsne_plot t-SNE plot including the input samples compared to reference data LICENSING MIT License Copyright 2020 St. Jude Children's Research Hospital Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. interactive_tsne_from_counts Inputs Required tissue_type (String, required ): Provide the tissue type to compare against: [blood, brain, solid]; Choices : ['blood', 'brain', 'solid'] gene_blacklist (File, required ) gencode_gtf (File, required ) in_counts (Array[File], required ): Provide count files to run for comparison Optional solid_covariates (File?) brain_covariates (File?) blood_covariates (File?) solid_counts (File?) brain_counts (File?) blood_counts (File?) covariates_file (File?) reference_counts (File?) Defaults generate_plot.disk_size (Int, default=15) generate_plot.memory_gb (Int, default=15) generate_plot.max_retries (Int, default=1) append_input.memory_gb (Int, default=5) file_prefix.max_retries (Int, default=1) untar.max_retries (Int, default=1) unzip.max_retries (Int, default=1) unzip.outfilename (String, default=basename(infile,\".gz\")) output_filename (String, default=\"output.html\"): Name for the output HTML t-SNE plot Outputs tsne_plot (File)","title":"Interactive t-SNE from Counts"},{"location":"workflows/interactive_tsne_from_counts/#interactive-t-sne-from-counts","text":"This WDL workflow compares counts files to St. Jude RNA-seq samples using a t-SNE plot. The count-based t-SNE pipeline requires that alignment must be against the GRCh38_no_alt reference . It should use parameters as specifed in our RNA-seq workflow to minimize any discrepancies caused by differing alignment specification. The count-based t-SNE pipeline requires that feature counts be generated with htseq-count as described in our RNA-seq workflow . This pipeline uses Gencode v31 annotations.","title":"Interactive t-SNE from Counts"},{"location":"workflows/interactive_tsne_from_counts/#output","text":"tsne_plot t-SNE plot including the input samples compared to reference data","title":"Output"},{"location":"workflows/interactive_tsne_from_counts/#licensing","text":"","title":"LICENSING"},{"location":"workflows/interactive_tsne_from_counts/#mit-license","text":"Copyright 2020 St. Jude Children's Research Hospital Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"MIT License"},{"location":"workflows/interactive_tsne_from_counts/#interactive_tsne_from_counts","text":"","title":"interactive_tsne_from_counts"},{"location":"workflows/interactive_tsne_from_counts/#inputs","text":"","title":"Inputs"},{"location":"workflows/interactive_tsne_from_counts/#required","text":"tissue_type (String, required ): Provide the tissue type to compare against: [blood, brain, solid]; Choices : ['blood', 'brain', 'solid'] gene_blacklist (File, required ) gencode_gtf (File, required ) in_counts (Array[File], required ): Provide count files to run for comparison","title":"Required"},{"location":"workflows/interactive_tsne_from_counts/#optional","text":"solid_covariates (File?) brain_covariates (File?) blood_covariates (File?) solid_counts (File?) brain_counts (File?) blood_counts (File?) covariates_file (File?) reference_counts (File?)","title":"Optional"},{"location":"workflows/interactive_tsne_from_counts/#defaults","text":"generate_plot.disk_size (Int, default=15) generate_plot.memory_gb (Int, default=15) generate_plot.max_retries (Int, default=1) append_input.memory_gb (Int, default=5) file_prefix.max_retries (Int, default=1) untar.max_retries (Int, default=1) unzip.max_retries (Int, default=1) unzip.outfilename (String, default=basename(infile,\".gz\")) output_filename (String, default=\"output.html\"): Name for the output HTML t-SNE plot","title":"Defaults"},{"location":"workflows/interactive_tsne_from_counts/#outputs","text":"tsne_plot (File)","title":"Outputs"},{"location":"workflows/make-qc-reference/","text":"Make QC Reference Create the reference DB needed by FastQ Screen in the quality-check-standard workflow. The output will be named fastq-screen-db.tar.gz , and should not be renamed before starting the quality-check-standard workflow. make_qc_reference Inputs Defaults fastq_screen_build_db.max_retries (Int, default=1) fastq_screen_build_db.filename (String, default=\"fastq-screen-db\") Outputs fastq_screen_db (File)","title":"Make QC Reference"},{"location":"workflows/make-qc-reference/#make-qc-reference","text":"Create the reference DB needed by FastQ Screen in the quality-check-standard workflow. The output will be named fastq-screen-db.tar.gz , and should not be renamed before starting the quality-check-standard workflow.","title":"Make QC Reference"},{"location":"workflows/make-qc-reference/#make_qc_reference","text":"","title":"make_qc_reference"},{"location":"workflows/make-qc-reference/#inputs","text":"","title":"Inputs"},{"location":"workflows/make-qc-reference/#defaults","text":"fastq_screen_build_db.max_retries (Int, default=1) fastq_screen_build_db.filename (String, default=\"fastq-screen-db\")","title":"Defaults"},{"location":"workflows/make-qc-reference/#outputs","text":"fastq_screen_db (File)","title":"Outputs"},{"location":"workflows/quality-check-standard/","text":"Quality Check Standard This workflow runs a variety of quality checking software on any BAM file. It can be WGS, WES, or Transcriptome data. The results are aggregated and run through MultiQC . LICENSING MIT License Copyright 2019 St. Jude Children's Research Hospital Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. quality_check Inputs Required fastq_screen_db (File, required ): Database for FastQ Screen. Can be generated using make-qc-reference.wdl . Must be named 'fastq-screen-db.tar.gz' experiment (String, required ): 'WGS', 'WES', or 'RNA-Seq' bam_index (File, required ): BAM index file corresponding to the input BAM bam (File, required ): Input BAM format file to quality check Optional multiqc.star_log (File?): Log file generated by the RNA-Seq aligner STAR multiqc.qualimap_rnaseq (File?) qualimap_rnaseq.disk_size_gb (Int?) qualimap_bamqc.disk_size_gb (Int?) star_log (File?): Log file generated by the RNA-Seq aligner STAR gencode_gtf (File?): GTF file provided by Gencode. Required for RNA-Seq data Defaults multiqc.memory_gb (Int, default=5) multiqc_rnaseq.memory_gb (Int, default=5) qualimap_rnaseq.memory_gb (Int, default=16) ngsderive_strandedness.memory_gb (Int, default=5) fastq_screen.num_reads (Int, default=100000) fqlint.memory_gb (Int, default=8) bam_to_fastq.memory_gb (Int, default=40) bam_to_fastq.prefix (String, default=basename(bam,\".bam\")) samtools_subsample.desired_reads (Int, default=500000) samtools_subsample.outname (String, default=basename(bam,\".bam\") + \".subsampled.bam\") qualimap_bamqc.memory_gb (Int, default=8) qualimap_bamqc.ncpu (Int, default=1) ngsderive_read_length.memory_gb (Int, default=5) fastqc.memory_gb (Int, default=5) fastqc.prefix (String, default=basename(bam,\".bam\")) fastqc.ncpu (Int, default=1) samtools_flagstat.memory_gb (Int, default=5) samtools_flagstat.outfilename (String, default=basename(bam,\".bam\") + \".flagstat.txt\") validate_bam.memory_gb (Int, default=8) validate_bam.output_filename (String, default=basename(bam,\".bam\") + \".ValidateSamFile.txt\") validate_bam.ignore_warnings (Boolean, default=true) compute_checksum.memory_gb (Int, default=5) max_retries (Int, default=1): Number of times to retry failed steps paired_end (Boolean, default=true): Whether the data is paired end fastq_format (String, default=\"sanger\"): Encoding format used for PHRED quality scores strand (String, default=\"\"): empty, 'Stranded-Reverse', 'Stranded-Forward', or 'Unstranded'. Only needed for RNA-Seq data. If missing, will be inferred Outputs bam_checksum (File) validate_sam_file (File) flagstat (File) fastqc_results (Array[File]) instrument_file (File) read_length_file (File) qualimap_bamqc_results (File) fastq_screen_results (Array[File]) inferred_strandedness (File?) qualimap_rnaseq_results (File?) multiqc_zip (File?) multiqc_rnaseq_zip (File?) parse_input Inputs Required input_fq_format (String, required ) input_fq_db (File, required ) input_strand (String, required ) input_experiment (String, required ) Optional input_gtf (File?) Outputs input_check (String)","title":"Quality Check Standard"},{"location":"workflows/quality-check-standard/#quality-check-standard","text":"This workflow runs a variety of quality checking software on any BAM file. It can be WGS, WES, or Transcriptome data. The results are aggregated and run through MultiQC .","title":"Quality Check Standard"},{"location":"workflows/quality-check-standard/#licensing","text":"","title":"LICENSING"},{"location":"workflows/quality-check-standard/#mit-license","text":"Copyright 2019 St. Jude Children's Research Hospital Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"MIT License"},{"location":"workflows/quality-check-standard/#quality_check","text":"","title":"quality_check"},{"location":"workflows/quality-check-standard/#inputs","text":"","title":"Inputs"},{"location":"workflows/quality-check-standard/#required","text":"fastq_screen_db (File, required ): Database for FastQ Screen. Can be generated using make-qc-reference.wdl . Must be named 'fastq-screen-db.tar.gz' experiment (String, required ): 'WGS', 'WES', or 'RNA-Seq' bam_index (File, required ): BAM index file corresponding to the input BAM bam (File, required ): Input BAM format file to quality check","title":"Required"},{"location":"workflows/quality-check-standard/#optional","text":"multiqc.star_log (File?): Log file generated by the RNA-Seq aligner STAR multiqc.qualimap_rnaseq (File?) qualimap_rnaseq.disk_size_gb (Int?) qualimap_bamqc.disk_size_gb (Int?) star_log (File?): Log file generated by the RNA-Seq aligner STAR gencode_gtf (File?): GTF file provided by Gencode. Required for RNA-Seq data","title":"Optional"},{"location":"workflows/quality-check-standard/#defaults","text":"multiqc.memory_gb (Int, default=5) multiqc_rnaseq.memory_gb (Int, default=5) qualimap_rnaseq.memory_gb (Int, default=16) ngsderive_strandedness.memory_gb (Int, default=5) fastq_screen.num_reads (Int, default=100000) fqlint.memory_gb (Int, default=8) bam_to_fastq.memory_gb (Int, default=40) bam_to_fastq.prefix (String, default=basename(bam,\".bam\")) samtools_subsample.desired_reads (Int, default=500000) samtools_subsample.outname (String, default=basename(bam,\".bam\") + \".subsampled.bam\") qualimap_bamqc.memory_gb (Int, default=8) qualimap_bamqc.ncpu (Int, default=1) ngsderive_read_length.memory_gb (Int, default=5) fastqc.memory_gb (Int, default=5) fastqc.prefix (String, default=basename(bam,\".bam\")) fastqc.ncpu (Int, default=1) samtools_flagstat.memory_gb (Int, default=5) samtools_flagstat.outfilename (String, default=basename(bam,\".bam\") + \".flagstat.txt\") validate_bam.memory_gb (Int, default=8) validate_bam.output_filename (String, default=basename(bam,\".bam\") + \".ValidateSamFile.txt\") validate_bam.ignore_warnings (Boolean, default=true) compute_checksum.memory_gb (Int, default=5) max_retries (Int, default=1): Number of times to retry failed steps paired_end (Boolean, default=true): Whether the data is paired end fastq_format (String, default=\"sanger\"): Encoding format used for PHRED quality scores strand (String, default=\"\"): empty, 'Stranded-Reverse', 'Stranded-Forward', or 'Unstranded'. Only needed for RNA-Seq data. If missing, will be inferred","title":"Defaults"},{"location":"workflows/quality-check-standard/#outputs","text":"bam_checksum (File) validate_sam_file (File) flagstat (File) fastqc_results (Array[File]) instrument_file (File) read_length_file (File) qualimap_bamqc_results (File) fastq_screen_results (Array[File]) inferred_strandedness (File?) qualimap_rnaseq_results (File?) multiqc_zip (File?) multiqc_rnaseq_zip (File?)","title":"Outputs"},{"location":"workflows/quality-check-standard/#parse_input","text":"","title":"parse_input"},{"location":"workflows/quality-check-standard/#inputs_1","text":"","title":"Inputs"},{"location":"workflows/quality-check-standard/#required_1","text":"input_fq_format (String, required ) input_fq_db (File, required ) input_strand (String, required ) input_experiment (String, required )","title":"Required"},{"location":"workflows/quality-check-standard/#optional_1","text":"input_gtf (File?)","title":"Optional"},{"location":"workflows/quality-check-standard/#outputs_1","text":"input_check (String)","title":"Outputs"},{"location":"workflows/rnaseq-standard/","text":"RNA-Seq Standard This WDL workflow runs the STAR RNA-seq alignment workflow for St. Jude Cloud. The workflow takes an input BAM file and splits it into fastq files for each read in the pair. The read pairs are then passed through STAR alignment to generate a BAM file. The BAM is run through several QC steps including FastQC and Qualimap. Quantification is done using htseq-count. A final QC report is produced by MultiQC to generate a combined overview of the QC results for the sample. LICENSING MIT License Copyright 2019 St. Jude Children's Research Hospital Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. rnaseq_standard Inputs Required stardb_tar_gz (File, required ): Database of reference files for the STAR aligner. Can be generated by rnaseq-star-db-build.wdl input_bam (File, required ): Input BAM format file to quality check gencode_gtf (File, required ): GTF file provided by Gencode Optional picard_sort.disk_size_gb (Int?) alignment.disk_size_gb (Int?) bam_to_fastqs.split.disk_size_gb (Int?) bam_to_fastqs.split.reject_unaccounted (Boolean?) Defaults deeptools_bamCoverage.memory_gb (Int, default=5) deeptools_bamCoverage.prefix (String, default=basename(bam,\".bam\")) htseq_count.memory_gb (Int, default=20) htseq_count.outfile (String, default=basename(bam,\".bam\") + \".counts.txt\") ngsderive_strandedness.memory_gb (Int, default=5) validate_bam.memory_gb (Int, default=8) validate_bam.output_filename (String, default=basename(bam,\".bam\") + \".ValidateSamFile.txt\") validate_bam.ignore_warnings (Boolean, default=true) validate_bam.index_validation_stringency_less_exhaustive (Boolean, default=false) validate_bam.summary_mode (Boolean, default=false) validate_bam.ignore_missing_platform (Boolean, default=true) samtools_index.memory_gb (Int, default=15) samtools_index.outfile (String, default=basename(bam) + \".bai\") picard_sort.memory_gb (Int, default=25) picard_sort.output_filename (String, default=basename(bam,\".bam\") + \".sorted.bam\") picard_sort.sort_order (String, default=\"coordinate\") alignment.memory_gb (Int, default=50) alignment.ncpu (Int, default=1) bam_to_fastqs.fqlint.memory_gb (Int, default=8) bam_to_fastqs.bam_to_fastq.prefix (String, default=basename(bam,\".bam\")) bam_to_fastqs.split.prefix (String, default=basename(bam,\".bam\")) bam_to_fastqs.bam_to_fastq_memory_gb (Int, default=40) bam_to_fastqs.samtools_sort_ncpu (Int, default=1) validate_input_bam.memory_gb (Int, default=8) validate_input_bam.output_filename (String, default=basename(bam,\".bam\") + \".ValidateSamFile.txt\") validate_input_bam.ignore_warnings (Boolean, default=true) validate_input_bam.index_validation_stringency_less_exhaustive (Boolean, default=false) validate_input_bam.summary_mode (Boolean, default=false) validate_input_bam.ignore_missing_platform (Boolean, default=true) max_retries (Int, default=1): Number of times to retry failed steps output_prefix (String, default=basename(input_bam,\".bam\")): Prefix for output files strand (String, default=\"\"): empty, 'Stranded-Reverse', 'Stranded-Forward', or 'Unstranded'. If missing, will be inferred Outputs bam (File) bam_index (File) star_log (File) gene_counts (File) inferred_strandedness (File) bigwig (File) parse_input Inputs Required input_strand (String, required ) Outputs input_check (String)","title":"RNA-Seq Standard"},{"location":"workflows/rnaseq-standard/#rna-seq-standard","text":"This WDL workflow runs the STAR RNA-seq alignment workflow for St. Jude Cloud. The workflow takes an input BAM file and splits it into fastq files for each read in the pair. The read pairs are then passed through STAR alignment to generate a BAM file. The BAM is run through several QC steps including FastQC and Qualimap. Quantification is done using htseq-count. A final QC report is produced by MultiQC to generate a combined overview of the QC results for the sample.","title":"RNA-Seq Standard"},{"location":"workflows/rnaseq-standard/#licensing","text":"","title":"LICENSING"},{"location":"workflows/rnaseq-standard/#mit-license","text":"Copyright 2019 St. Jude Children's Research Hospital Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"MIT License"},{"location":"workflows/rnaseq-standard/#rnaseq_standard","text":"","title":"rnaseq_standard"},{"location":"workflows/rnaseq-standard/#inputs","text":"","title":"Inputs"},{"location":"workflows/rnaseq-standard/#required","text":"stardb_tar_gz (File, required ): Database of reference files for the STAR aligner. Can be generated by rnaseq-star-db-build.wdl input_bam (File, required ): Input BAM format file to quality check gencode_gtf (File, required ): GTF file provided by Gencode","title":"Required"},{"location":"workflows/rnaseq-standard/#optional","text":"picard_sort.disk_size_gb (Int?) alignment.disk_size_gb (Int?) bam_to_fastqs.split.disk_size_gb (Int?) bam_to_fastqs.split.reject_unaccounted (Boolean?)","title":"Optional"},{"location":"workflows/rnaseq-standard/#defaults","text":"deeptools_bamCoverage.memory_gb (Int, default=5) deeptools_bamCoverage.prefix (String, default=basename(bam,\".bam\")) htseq_count.memory_gb (Int, default=20) htseq_count.outfile (String, default=basename(bam,\".bam\") + \".counts.txt\") ngsderive_strandedness.memory_gb (Int, default=5) validate_bam.memory_gb (Int, default=8) validate_bam.output_filename (String, default=basename(bam,\".bam\") + \".ValidateSamFile.txt\") validate_bam.ignore_warnings (Boolean, default=true) validate_bam.index_validation_stringency_less_exhaustive (Boolean, default=false) validate_bam.summary_mode (Boolean, default=false) validate_bam.ignore_missing_platform (Boolean, default=true) samtools_index.memory_gb (Int, default=15) samtools_index.outfile (String, default=basename(bam) + \".bai\") picard_sort.memory_gb (Int, default=25) picard_sort.output_filename (String, default=basename(bam,\".bam\") + \".sorted.bam\") picard_sort.sort_order (String, default=\"coordinate\") alignment.memory_gb (Int, default=50) alignment.ncpu (Int, default=1) bam_to_fastqs.fqlint.memory_gb (Int, default=8) bam_to_fastqs.bam_to_fastq.prefix (String, default=basename(bam,\".bam\")) bam_to_fastqs.split.prefix (String, default=basename(bam,\".bam\")) bam_to_fastqs.bam_to_fastq_memory_gb (Int, default=40) bam_to_fastqs.samtools_sort_ncpu (Int, default=1) validate_input_bam.memory_gb (Int, default=8) validate_input_bam.output_filename (String, default=basename(bam,\".bam\") + \".ValidateSamFile.txt\") validate_input_bam.ignore_warnings (Boolean, default=true) validate_input_bam.index_validation_stringency_less_exhaustive (Boolean, default=false) validate_input_bam.summary_mode (Boolean, default=false) validate_input_bam.ignore_missing_platform (Boolean, default=true) max_retries (Int, default=1): Number of times to retry failed steps output_prefix (String, default=basename(input_bam,\".bam\")): Prefix for output files strand (String, default=\"\"): empty, 'Stranded-Reverse', 'Stranded-Forward', or 'Unstranded'. If missing, will be inferred","title":"Defaults"},{"location":"workflows/rnaseq-standard/#outputs","text":"bam (File) bam_index (File) star_log (File) gene_counts (File) inferred_strandedness (File) bigwig (File)","title":"Outputs"},{"location":"workflows/rnaseq-standard/#parse_input","text":"","title":"parse_input"},{"location":"workflows/rnaseq-standard/#inputs_1","text":"","title":"Inputs"},{"location":"workflows/rnaseq-standard/#required_1","text":"input_strand (String, required )","title":"Required"},{"location":"workflows/rnaseq-standard/#outputs_1","text":"input_check (String)","title":"Outputs"},{"location":"workflows/rnaseq-star-db-build/","text":"RNASeq STAR DB build This WDL workflow generates a set of genome reference files usable by the STAR aligner from an input reference file in FASTA format. Output reference_fa the reference FASTA file gencode_gtf the reference gencode GTF file stardb_tar_gz the STAR DB folder in .tar.gz format LICENSING MIT License Copyright 2019 St. Jude Children's Research Hospital Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. rnaseq_star_db_build Inputs Required gencode_gtf_url (String, required ): URL to retrieve the reference gencode GTF file. reference_fa_url (String, required ): URL to retrieve the reference FASTA file from. Optional star_db_build.disk_size_gb (Int?) Defaults star_db_build.max_retries (Int, default=1) star_db_build.memory_gb (Int, default=50) star_db_build.ram_limit (String, default=\"45000000000\") gencode_unzip.max_retries (Int, default=1) gencode_unzip.outfilename (String, default=basename(infile,\".gz\")) gencode_download.max_retries (Int, default=1) reference_unzip.max_retries (Int, default=1) reference_unzip.outfilename (String, default=basename(infile,\".gz\")) reference_download.max_retries (Int, default=1) Outputs reference_fa (File) gencode_gtf (File) stardb_tar_gz (File)","title":"RNASeq STAR DB build"},{"location":"workflows/rnaseq-star-db-build/#rnaseq-star-db-build","text":"This WDL workflow generates a set of genome reference files usable by the STAR aligner from an input reference file in FASTA format.","title":"RNASeq STAR DB build"},{"location":"workflows/rnaseq-star-db-build/#output","text":"reference_fa the reference FASTA file gencode_gtf the reference gencode GTF file stardb_tar_gz the STAR DB folder in .tar.gz format","title":"Output"},{"location":"workflows/rnaseq-star-db-build/#licensing","text":"","title":"LICENSING"},{"location":"workflows/rnaseq-star-db-build/#mit-license","text":"Copyright 2019 St. Jude Children's Research Hospital Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"MIT License"},{"location":"workflows/rnaseq-star-db-build/#rnaseq_star_db_build","text":"","title":"rnaseq_star_db_build"},{"location":"workflows/rnaseq-star-db-build/#inputs","text":"","title":"Inputs"},{"location":"workflows/rnaseq-star-db-build/#required","text":"gencode_gtf_url (String, required ): URL to retrieve the reference gencode GTF file. reference_fa_url (String, required ): URL to retrieve the reference FASTA file from.","title":"Required"},{"location":"workflows/rnaseq-star-db-build/#optional","text":"star_db_build.disk_size_gb (Int?)","title":"Optional"},{"location":"workflows/rnaseq-star-db-build/#defaults","text":"star_db_build.max_retries (Int, default=1) star_db_build.memory_gb (Int, default=50) star_db_build.ram_limit (String, default=\"45000000000\") gencode_unzip.max_retries (Int, default=1) gencode_unzip.outfilename (String, default=basename(infile,\".gz\")) gencode_download.max_retries (Int, default=1) reference_unzip.max_retries (Int, default=1) reference_unzip.outfilename (String, default=basename(infile,\".gz\")) reference_download.max_retries (Int, default=1)","title":"Defaults"},{"location":"workflows/rnaseq-star-db-build/#outputs","text":"reference_fa (File) gencode_gtf (File) stardb_tar_gz (File)","title":"Outputs"}]}